################################################################################
#
#   Run the IOR benchmark with the POSIX I/O API and one file per task
#
################################################################################
IOR START

################################################################################
### When filePerProc is 0 a single file is created with
###   fileSize == segmentCount * blockSize * numTasks
###
### When filePerProc is 1 there will be numTasks files created with
###   fileSize == segmentCount * blockSize
###
### To generate an input dataset for Load 2 you can set the following
### parameters to be identical to those specified in your input for the actual
### benchmark test (e.g. your load2-posix-filepertask.ior file)
###
    numTasks=10             # number of MPI processes to use
    segmentCount=9831       # must be > fileSize / ( blockSize * numTasks ) where fileSize must be greater than 1.5 times the aggregate DRAM available for use by the page cache
    transferSize=1M         # size of a single data buffer to be transferred by a single I/O call.
    blockSize=10M           # size of a single process's sequential read/write block
    testFile=datafile.dat   # will read/write files called ./datafile.dat.00000000 ./datafile.dat.00000001 etc
    filePerProc=1           # read/write one file per MPI process
###
################################################################################

### The following parameters should not have to change to generate the test input
    repetitions=1           # you may execute the same test multiple times but ensure that all nodes' page caches are flushed before re-running IOR
    verbose=0               # print additional information about the job geometry
    keepFile=1              # delete files generated during write test at the end of each execution
    fsync=1                 # for POSIX api call fsync(2) before close(2)

### The following parameters define the nature of the IOR execution
    api=POSIX               # use POSIX open/close/read/write
    blastMode=0             # enable the mode which generates a locally random IO pattern
    readFile=0              # perform the read component of the test after the write component has completed
    writeFile=1             # perform the write component of the test

RUN

IOR STOP
